// Generated by `wit-bindgen` 0.13.0. DO NOT EDIT!
package foo

// #include "foo.h"
import "C"

import "unsafe"

// Export functions from foo
var foo Foo = nil
func SetFoo(i Foo) {
  foo = i
}
type Foo interface {
  Concat(left string, right string) string 
}
//export foo_concat
func FooConcat(left *C.foo_string_t, right *C.foo_string_t, ret *C.foo_string_t) {
  defer C.foo_string_free(left)
  defer C.foo_string_free(right)
  var lift_left string
  lift_left = C.GoStringN((*C.char)(unsafe.Pointer(left.ptr)), C.int(left.len))
  var lift_right string
  lift_right = C.GoStringN((*C.char)(unsafe.Pointer(right.ptr)), C.int(right.len))
  result := foo.Concat(lift_left, lift_right)
  var lower_result C.foo_string_t
  
  // use unsafe.Pointer to avoid copy
  lower_result.ptr = (*uint8)(unsafe.Pointer(C.CString(result)))
  lower_result.len = C.size_t(len(result))
  *ret = lower_result
  
}
