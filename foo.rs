// Generated by `wit-bindgen` 0.13.0. DO NOT EDIT!
const _: () = {
  
  #[doc(hidden)]
  #[export_name = "concat"]
  #[allow(non_snake_case)]
  unsafe extern "C" fn __export_concat(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
    #[allow(unused_imports)]
    use wit_bindgen::rt::{alloc, vec::Vec, string::String};
    
    // Before executing any other code, use this function to run all static
    // constructors, if they have not yet been run. This is a hack required
    // to work around wasi-libc ctors calling import functions to initialize
    // the environment.
    //
    // This functionality will be removed once rust 1.69.0 is stable, at which
    // point wasi-libc will no longer have this behavior.
    //
    // See
    // https://github.com/bytecodealliance/preview2-prototyping/issues/99
    // for more details.
    #[cfg(target_arch="wasm32")]
    wit_bindgen::rt::run_ctors_once();
    
    let len0 = arg1 as usize;
    let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
    let len1 = arg3 as usize;
    let bytes1 = Vec::from_raw_parts(arg2 as *mut _, len1, len1);
    let result2 = <_GuestImpl as Guest>::concat(wit_bindgen::rt::string_lift(bytes0), wit_bindgen::rt::string_lift(bytes1));
    let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
    let vec4 = (result2.into_bytes()).into_boxed_slice();
    let ptr4 = vec4.as_ptr() as i32;
    let len4 = vec4.len() as i32;
    ::core::mem::forget(vec4);
    *((ptr3 + 4) as *mut i32) = len4;
    *((ptr3 + 0) as *mut i32) = ptr4;
    ptr3
  }
  
  const _: () = {
    #[doc(hidden)]
    #[export_name = "cabi_post_concat"]
    #[allow(non_snake_case)]
    unsafe extern "C" fn __post_return_concat(arg0: i32,) {
      let l0 = *((arg0 + 0) as *const i32);
      let l1 = *((arg0 + 4) as *const i32);
      wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
    }
  };
};
use foo as _GuestImpl;
pub trait Guest {
  fn concat(left: wit_bindgen::rt::string::String,right: wit_bindgen::rt::string::String,) -> wit_bindgen::rt::string::String;
}

#[allow(unused_imports)]
use wit_bindgen::rt::{alloc, vec::Vec, string::String};

#[repr(align(4))]
struct _RetArea([u8; 8]);
static mut _RET_AREA: _RetArea = _RetArea([0; 8]);
pub mod example {
  pub mod foo {
    
    #[allow(clippy::all)]
    pub mod fun {
      #[used]
      #[doc(hidden)]
      #[cfg(target_arch = "wasm32")]
      static __FORCE_SECTION_REF: fn() = super::super::super::__link_section;
      /// A function that accepts a character
      /// A function that returns a character
      #[derive(Clone)]
      pub struct Rec {
        pub first: wit_bindgen::rt::string::String,
        pub second: wit_bindgen::rt::string::String,
      }
      impl ::core::fmt::Debug for Rec {
        fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
          f.debug_struct("Rec").field("first", &self.first).field("second", &self.second).finish()
        }
      }
      #[allow(clippy::all)]
      pub fn concat_record(input: &Rec,) -> wit_bindgen::rt::string::String{
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        unsafe {
          
          #[repr(align(4))]
          struct RetArea([u8; 8]);
          let mut ret_area = ::core::mem::MaybeUninit::<RetArea>::uninit();
          let Rec{ first:first0, second:second0, } = input;
          let vec1 = first0;
          let ptr1 = vec1.as_ptr() as i32;
          let len1 = vec1.len() as i32;
          let vec2 = second0;
          let ptr2 = vec2.as_ptr() as i32;
          let len2 = vec2.len() as i32;
          let ptr3 = ret_area.as_mut_ptr() as i32;
          #[cfg(target_arch = "wasm32")]
          #[link(wasm_import_module = "example:foo/fun")]
          extern "C" {
            #[link_name = "concat-record"]
            fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, );
          }
          
          #[cfg(not(target_arch = "wasm32"))]
          fn wit_import(_: i32, _: i32, _: i32, _: i32, _: i32, ){ unreachable!() }
          wit_import(ptr1, len1, ptr2, len2, ptr3);
          let l4 = *((ptr3 + 0) as *const i32);
          let l5 = *((ptr3 + 4) as *const i32);
          let len6 = l5 as usize;
          let bytes6 = Vec::from_raw_parts(l4 as *mut _, len6, len6);
          wit_bindgen::rt::string_lift(bytes6)
        }
      }
      
    }
    
  }
}
pub mod exports {
  pub mod example {
    pub mod foo {
      
      #[allow(clippy::all)]
      pub mod fun {
        #[used]
        #[doc(hidden)]
        #[cfg(target_arch = "wasm32")]
        static __FORCE_SECTION_REF: fn() = super::super::super::super::__link_section;
        /// A function that accepts a character
        /// A function that returns a character
        #[derive(Clone)]
        pub struct Rec {
          pub first: wit_bindgen::rt::string::String,
          pub second: wit_bindgen::rt::string::String,
        }
        impl ::core::fmt::Debug for Rec {
          fn fmt(&self, f: &mut ::core::fmt::Formatter<'_>) -> ::core::fmt::Result {
            f.debug_struct("Rec").field("first", &self.first).field("second", &self.second).finish()
          }
        }
        const _: () = {
          
          #[doc(hidden)]
          #[export_name = "example:foo/fun#concat-record"]
          #[allow(non_snake_case)]
          unsafe extern "C" fn __export_concat_record(arg0: i32,arg1: i32,arg2: i32,arg3: i32,) -> i32 {
            #[allow(unused_imports)]
            use wit_bindgen::rt::{alloc, vec::Vec, string::String};
            
            // Before executing any other code, use this function to run all static
            // constructors, if they have not yet been run. This is a hack required
            // to work around wasi-libc ctors calling import functions to initialize
            // the environment.
            //
            // This functionality will be removed once rust 1.69.0 is stable, at which
            // point wasi-libc will no longer have this behavior.
            //
            // See
            // https://github.com/bytecodealliance/preview2-prototyping/issues/99
            // for more details.
            #[cfg(target_arch="wasm32")]
            wit_bindgen::rt::run_ctors_once();
            
            let len0 = arg1 as usize;
            let bytes0 = Vec::from_raw_parts(arg0 as *mut _, len0, len0);
            let len1 = arg3 as usize;
            let bytes1 = Vec::from_raw_parts(arg2 as *mut _, len1, len1);
            let result2 = <_GuestImpl as Guest>::concat_record(Rec{
              first: wit_bindgen::rt::string_lift(bytes0),
              second: wit_bindgen::rt::string_lift(bytes1),
            });
            let ptr3 = _RET_AREA.0.as_mut_ptr() as i32;
            let vec4 = (result2.into_bytes()).into_boxed_slice();
            let ptr4 = vec4.as_ptr() as i32;
            let len4 = vec4.len() as i32;
            ::core::mem::forget(vec4);
            *((ptr3 + 4) as *mut i32) = len4;
            *((ptr3 + 0) as *mut i32) = ptr4;
            ptr3
          }
          
          const _: () = {
            #[doc(hidden)]
            #[export_name = "cabi_post_example:foo/fun#concat-record"]
            #[allow(non_snake_case)]
            unsafe extern "C" fn __post_return_concat_record(arg0: i32,) {
              let l0 = *((arg0 + 0) as *const i32);
              let l1 = *((arg0 + 4) as *const i32);
              wit_bindgen::rt::dealloc(l0, (l1) as usize, 1);
            }
          };
        };
        use super::super::super::super::fun as _GuestImpl;
        pub trait Guest {
          fn concat_record(input: Rec,) -> wit_bindgen::rt::string::String;
        }
        
        #[allow(unused_imports)]
        use wit_bindgen::rt::{alloc, vec::Vec, string::String};
        
        #[repr(align(4))]
        struct _RetArea([u8; 8]);
        static mut _RET_AREA: _RetArea = _RetArea([0; 8]);
        
      }
      
    }
  }
}

#[cfg(target_arch = "wasm32")]
#[link_section = "component-type:foo"]
#[doc(hidden)]
pub static __WIT_BINDGEN_COMPONENT_TYPE: [u8; 548] = [3, 0, 3, 102, 111, 111, 0, 97, 115, 109, 13, 0, 1, 0, 7, 167, 2, 1, 65, 4, 1, 66, 4, 1, 114, 2, 5, 102, 105, 114, 115, 116, 115, 6, 115, 101, 99, 111, 110, 100, 115, 4, 0, 3, 114, 101, 99, 3, 0, 0, 1, 64, 1, 5, 105, 110, 112, 117, 116, 1, 0, 115, 4, 0, 13, 99, 111, 110, 99, 97, 116, 45, 114, 101, 99, 111, 114, 100, 1, 2, 4, 1, 15, 101, 120, 97, 109, 112, 108, 101, 58, 102, 111, 111, 47, 102, 117, 110, 5, 0, 1, 65, 6, 1, 66, 4, 1, 114, 2, 5, 102, 105, 114, 115, 116, 115, 6, 115, 101, 99, 111, 110, 100, 115, 4, 0, 3, 114, 101, 99, 3, 0, 0, 1, 64, 1, 5, 105, 110, 112, 117, 116, 1, 0, 115, 4, 0, 13, 99, 111, 110, 99, 97, 116, 45, 114, 101, 99, 111, 114, 100, 1, 2, 3, 1, 15, 101, 120, 97, 109, 112, 108, 101, 58, 102, 111, 111, 47, 102, 117, 110, 5, 0, 1, 64, 2, 4, 108, 101, 102, 116, 115, 5, 114, 105, 103, 104, 116, 115, 0, 115, 4, 0, 6, 99, 111, 110, 99, 97, 116, 1, 1, 1, 66, 4, 1, 114, 2, 5, 102, 105, 114, 115, 116, 115, 6, 115, 101, 99, 111, 110, 100, 115, 4, 0, 3, 114, 101, 99, 3, 0, 0, 1, 64, 1, 5, 105, 110, 112, 117, 116, 1, 0, 115, 4, 0, 13, 99, 111, 110, 99, 97, 116, 45, 114, 101, 99, 111, 114, 100, 1, 2, 4, 1, 15, 101, 120, 97, 109, 112, 108, 101, 58, 102, 111, 111, 47, 102, 117, 110, 5, 2, 4, 1, 15, 101, 120, 97, 109, 112, 108, 101, 58, 102, 111, 111, 47, 102, 111, 111, 4, 1, 11, 21, 1, 1, 15, 101, 120, 97, 109, 112, 108, 101, 58, 102, 111, 111, 47, 119, 105, 116, 3, 0, 0, 0, 138, 1, 12, 112, 97, 99, 107, 97, 103, 101, 45, 100, 111, 99, 115, 0, 123, 34, 105, 110, 116, 101, 114, 102, 97, 99, 101, 115, 34, 58, 123, 34, 102, 117, 110, 34, 58, 123, 34, 116, 121, 112, 101, 115, 34, 58, 123, 34, 114, 101, 99, 34, 58, 123, 34, 100, 111, 99, 115, 34, 58, 34, 65, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 104, 97, 116, 32, 97, 99, 99, 101, 112, 116, 115, 32, 97, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 92, 110, 65, 32, 102, 117, 110, 99, 116, 105, 111, 110, 32, 116, 104, 97, 116, 32, 114, 101, 116, 117, 114, 110, 115, 32, 97, 32, 99, 104, 97, 114, 97, 99, 116, 101, 114, 34, 125, 125, 125, 125, 125, 0, 70, 9, 112, 114, 111, 100, 117, 99, 101, 114, 115, 1, 12, 112, 114, 111, 99, 101, 115, 115, 101, 100, 45, 98, 121, 2, 13, 119, 105, 116, 45, 99, 111, 109, 112, 111, 110, 101, 110, 116, 6, 48, 46, 49, 54, 46, 48, 16, 119, 105, 116, 45, 98, 105, 110, 100, 103, 101, 110, 45, 114, 117, 115, 116, 6, 48, 46, 49, 51, 46, 48];

#[inline(never)]
#[doc(hidden)]
#[cfg(target_arch = "wasm32")]
pub fn __link_section() {}
