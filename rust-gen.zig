// Generated by `wit-bindgen` 0.13.0. DO NOT EDIT!

const std = @import("std");
const mem = std.mem;
var gpa = std.heap.GeneralPurposeAllocator(.{}){};
const allocator = gpa.allocator();

fn alloc(len: usize) [*]u8 {
  const buf = allocator.alloc(u8, len) catch |e| {
    std.debug.panic("FAILED TO ALLOC MEM {}", .{e});
  };
  return buf.ptr;
}

export fn cabi_realloc(origPtr: *[]u8, origSize: u8, alignment: u8, newSize: u8) ?[*]u8 {
  _ = origSize;
  _ = alignment;
  const buf = allocator.realloc(origPtr.*, newSize) catch {
    return null;
  };
  return buf.ptr;
}
export fn __export_concat(arg0: i32, arg1: i32, arg2: i32, arg3: i32, ) i32 {
  const ptrAsUsize0: usize = @intCast(arg0);
  const ptr0: [*]u8 = @ptrFromInt(ptrAsUsize0);
  const len0: u32 = @intCast(arg1);
  const bytes0 = ptr0[0..len0];
  const ptrAsUsize1: usize = @intCast(arg2);
  const ptr1: [*]u8 = @ptrFromInt(ptrAsUsize1);
  const len1: u32 = @intCast(arg3);
  const bytes1 = ptr1[0..len1];
  const result2 = Guest.concat(bytes0, bytes1);
  const ptr3 = alloc(8);
  std.mem.writeIntLittle(u32, ptr3[4..8], @intCast(result2.len));
  std.mem.writeIntLittle(u32, ptr3[0..4], @intCast(@intFromPtr(result2.ptr)));
  const num: i32 = @intCast(@intFromPtr(ptr3));
  return num;
}

export fn __post_return_concat(arg0: i32,) void {
  var buffer: [8]u8 = .{0} ** 8;
  std.mem.writeIntNative(i32, buffer[0..][0..@sizeOf(i32)], arg0);
  const strPtr = buffer[0..4];
  const strSize = buffer[4..8];
  const bytesPtr = std.mem.readIntLittle(u32, @ptrCast(strPtr));
  const ptr_size = std.mem.readIntLittle(u32, @ptrCast(strSize));
  const casted: [*]u8 = @ptrFromInt(bytesPtr);
  allocator.free(casted[0..ptr_size]);
}

export fn __export_add(arg0: i32, arg1: i32, ) i32 {
  const result0 = Guest.add(@intCast(arg0), @intCast(arg1));
  const num: i32 = @intCast(@intFromPtr(result0));
  return num;
}
const Guest = struct {
  fn concat(left: []u8, right: []u8) []u8{
  }
  
  fn add(left: u8, right: u8) u8{
  }
  
};
comptime {
  @export(__export_concat, .{ .name = "concat"});
  @export(__post_return_concat, .{ .name = "cabi_post_concat"});
  @export(__export_add, .{ .name = "add"});
  @export(__post_return_add, .{ .name = "cabi_post_add"});
}

pub fn main() void {}